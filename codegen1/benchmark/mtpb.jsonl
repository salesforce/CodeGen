{"prompts": ["Assign the string \"{A}\" to a variable named \"my_string\".", "Lowercase the given string \"my_string\".", "Assign the distinct characters of the string to a variable named \"chars\".", "Sort these characters in alphabetical order.", "Print the resulting list of characters."], "inputs": [{"A": "abcde"}, {"A": "abcdecadeCADE"}, {"A": "aaaaAAAAaaaa"}, {"A": "Jerry jERRY JeRRRY"}, {"A": "ddddc"}], "outputs": [["a", "b", "c", "d", "e"], ["a", "b", "c", "d", "e"], ["a"], [" ", "e", "j", "r", "y"], ["c", "d"]], "max_gen_length": 128, "category": "string", "name": "Sandwich string", "description": "Append a string in the middle of another string.", "id": "1"}
{"prompts": ["Define a list of integers named \"numbers\" with the values {numbers}.", "Calculate the sum of the elements in variable \"numbers\" and store the result to variable \"total\".", "Divide each element of the list by the total and multiply by 100, store the result to variable \"normalized\".", "Convert each element in variable \"normalized\" into a formatted string with single decimal point and store the result into \"formatted\".", "Print the variable \"formatted\"."], "inputs": [{"numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {"numbers": [56, 97, 19, 57, 69]}, {"numbers": []}, {"numbers": [1]}, {"numbers": [10000, 1]}], "outputs": [["1.8", "3.6", "5.5", "7.3", "9.1", "10.9", "12.7", "14.5", "16.4", "18.2"], ["18.8", "32.6", "6.4", "19.1", "23.2"], [], ["100.0"], ["100.0", "0.0"]], "max_gen_length": 128, "category": "math", "name": "Normalize integer list", "description": "Normalize a list of positive integers and print formatted percentages.", "id": "2"}
{"prompts": ["Write a function that takes an integer minutes and converts it to seconds.", "Write a function that takes an integer hours and converts it to seconds.", "Print the total seconds of {a1} hours and {a2} minutes."], "inputs": [{"a1": 2, "a2": 13}, {"a1": 1, "a2": 2}, {"a1": 32, "a2": 32}, {"a1": 0, "a2": 32}, {"a1": 1, "a2": 1}], "outputs": [7980, 3720, 117120, 1920, 3660], "max_gen_length": 128, "category": "math", "name": "Convert time", "description": "Convert units of time.", "id": "3"}
{"prompts": ["Implement a function which returns the n-th Fibonacci number.", "Implement a function that computes the square of an integer argument.", "Print out the square of {a1}-th Fibonacci number."], "inputs": [{"a1": 1}, {"a1": 2}, {"a1": 3}, {"a1": 4}, {"a1": 10}], "outputs": [1, 1, 4, 9, 3025], "max_gen_length": 128, "category": "math", "name": "Squared Fibonacci", "description": "Print the squared fibonacci numbers.", "id": "4"}
{"prompts": ["Assign the list of numbers \"{A}\" to a variable named \"my_numbers\".", "Count the number of negative numbers in the list as \"n_neg\".", "Count the number of positive numbers in the list as \"n_pos\".", "Print out the larger number of those two."], "inputs": [{"A": "[1,2,3,4]"}, {"A": "[-1,2,3,4]"}, {"A": "[-1,-2,-3,-4]"}, {"A": "[-1000000, 1, 2]"}, {"A": "[-1, 0.2, 0.3, 0.4]"}], "outputs": [4, 3, 4, 2, 3], "max_gen_length": 128, "category": "array", "name": "Count negative numbers", "description": "Count negative numbers in a given list.", "id": "5"}
{"prompts": ["Import the pandas library.", "Create a dataframe with a column labeled \"Yes\" with values [{a1}, {a2}] and a column named \"No\" with values [{a3}, {a4}].", "Compute the mean per column and store the value in a variable named means.", "Print the variable means."], "inputs": [{"a1": "50", "a2": "21", "a3": "131", "a4": "2"}, {"a1": "-10", "a2": "10", "a3": "-20", "a4": "20"}, {"a1": "1", "a2": "2", "a3": "3", "a4": "4"}, {"a1": "-1", "a2": "-2", "a3": "-3", "a4": "-4"}, {"a1": "-10", "a2": "-20", "a3": "-30", "a4": "-40"}], "outputs": [[35.5, 66.5], [0.0, 0.0], [1.5, 3.5], [-1.5, -3.5], [-15.0, -35.0]], "max_gen_length": 128, "category": "data science", "name": "Pandas mean", "description": "Construct and compute the mean of a pandas df.", "id": "6"}
{"prompts": ["Write a function that returns a number, for numbers multiple of {a1} print \"fizz\" instead of a number, for numbers multiple of {a2} print \"buzz\", for numbers which are multiples of both {a1} and {a2} \"fizzbuzz\".", "Create a list of integers ranging from {a3} to {a4}.", "Call the written function for each element in the list and store the result as \"new_list\".", "Print out the list \"new_list\"."], "inputs": [{"a1": 3, "a2": 5, "a3": 0, "a4": 4}, {"a1": 5, "a2": 3, "a3": 0, "a4": 9}, {"a1": 9, "a2": 3, "a3": 0, "a4": 2}, {"a1": 2, "a2": 4, "a3": 0, "a4": 7}, {"a1": 2, "a2": 4, "a3": 4, "a4": 7}], "outputs": [["fizzbuzz", 1, 2, "fizz", 4], ["fizzbuzz", 1, 2, "buzz", 4, "fizz", "buzz", 7, 8, "buzz"], ["fizzbuzz", 1, 2], ["fizzbuzz", 1, "fizz", 3, "fizzbuzz", 5, "fizz", 7], ["fizzbuzz", 5, "fizz", 7]], "max_gen_length": 128, "category": "algorithm", "name": "Fizz buzz", "description": "Solve the fizz buzz problem.", "id": "7"}
{"prompts": ["Write a function that can take a string and return a list of word bigrams as pairs.", "Assign the string \"{a1}\" to a variable named sentence.", "Print out the bi-grams for the variable named sentence."], "inputs": [{"a1": "Have free hours and love children? Drive kids to school, soccer practice and other activities."}, {"a1": "Hello World Foo Bar"}, {"a1": "AA BB CC"}, {"a1": "abc de"}, {"a1": "AB CD EF"}], "outputs": [[["Have", "free"], ["free", "hours"], ["hours", "and"], ["and", "love"], ["love", "children?"], ["children?", "Drive"], ["Drive", "kids"], ["kids", "to"], ["to", "school,"], ["school,", "soccer"], ["soccer", "practice"], ["practice", "and"], ["and", "other"], ["other", "activities."]], [["Hello", "World"], ["World", "Foo"], ["Foo", "Bar"]], [["AA", "BB"], ["BB", "CC"]], [["abc", "de"]], [["AB", "CD"], ["CD", "EF"]]], "max_gen_length": 128, "category": "string", "name": "Bi-grams", "description": "Print the bi-grams of a sentence.", "id": "8"}
{"prompts": ["Assign the names [\"Kevin\", \"John\", \"Mike\", \"Mitch\"] as keys and corresponding notes [{a1}, {a2}, {a3}, {a4}] as values to a dictionary named \"my_notes\".", "Create a function that takes a dictionary of objects like {{ \"name\": \"John\", \"notes\": [3, 5, 4] }} and returns a dictionary of objects like {{ \"name\": \"John\", \"top_note\": 5 }}.", "For each name in the dictionary get the top_note and store the pairs of names and top_notes as \"my_list\".", "Find the name with the highest top_note and assign it to \"top_name\".", "Print the variable top_name."], "inputs": [{"a1": [3, 5, 4], "a2": [3, 1, 1], "a3": [1, 2, 3], "a4": [0, 4, 4]}, {"a1": [0], "a2": [1], "a3": [2], "a4": [3]}, {"a1": [0, 7], "a2": [1, 9], "a3": [2, 7], "a4": [3, 6]}, {"a1": [-1], "a2": [-1], "a3": [1], "a4": [-1]}, {"a1": [0], "a2": [10000], "a3": [1000], "a4": [9999]}], "outputs": ["Kevin", "Mitch", "Mike", "Mike", "John"], "max_gen_length": 128, "category": "dict", "name": "Top note", "description": "Print name with top note out of a dict.", "id": "9"}
{"prompts": ["Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = \"11111111\".", "Create a function that will take the output of the above function and return the HEX number. E.g., to_hex(\"11111111\") = 0xFF.", "Assign the value {a1} to a variable named \"my_hex\".", "Convert the variable \"my_hex\" into the binary equivalent as string named \"my_binary\".", "Convert \"my_binary\" back to a HEX number named \"result\".", "Print the result."], "inputs": [{"a1": "0xFF"}, {"a1": "0xAA"}, {"a1": "0xAF"}, {"a1": "0x12"}, {"a1": "0xAA"}], "outputs": [255, 170, 175, 18, 170], "max_gen_length": 128, "category": "math", "name": "Hex to binary", "description": "Hex to binary and reverse.", "id": "10"}
{"prompts": ["Assign the keys {a1} and values {a2} to a dictionary named \"my_dict\".", "Write a function \"invert\" that inverts the keys and values of a dictionary. E.g., invert({{ \"z\": \"q\", \"w\": \"f\" }}) = {{ \"q\": \"z\", \"f\": \"w\" }}.", "Write a function \"is_inverted\" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.", "Create a new variable \"my_dict2\" and initialize it with {a3} \"my_dict\".", "Print a boolean value indicating if \"my_dict2\" is the inverted dictionary of \"my_dict\"."], "inputs": [{"a1": "[\"a\", \"b\"]", "a2": "[1, 2]", "a3": ""}, {"a1": "[\"a\", \"b\"]", "a2": "[1, 2]", "a3": "inverted"}, {"a1": "[\"a\", \"b\", \"c\"]", "a2": "[1, 2, -1]", "a3": ""}, {"a1": "[\"a\", \"b\", \"c\"]", "a2": "[1, 2, -1]", "a3": "inverted"}, {"a1": "[\"1\"]", "a2": "[1]", "a3": ""}], "outputs": [false, true, false, true, false], "max_gen_length": 128, "category": "dict", "name": "Invert dict", "description": "Detect inversion of dict.", "id": "11"}
{"prompts": ["Defines class named \"Player\" that takes the following four arguments for a particular football player: name, age, height, weight.", "Also, create three functions for the class that returns the following strings: (1) get_age() returns \"{{name}} is age {{age}}\", (2) get_height() returns \"{{name}} is {{height}} cm\", (3) get_weight() returns \"{{name}} weighs {{weight}} kg\".", "Create an object named \"player\" with name \"{a1}\", age {a2}, height {a3}, weight {a4}.", "Call the getter for the {a5} of the player and print the result."], "inputs": [{"a1": "David Jones", "a2": 25, "a3": 175, "a4": 75, "a5": "age"}, {"a1": "Paul Smith", "a2": 50, "a3": 160, "a4": 60, "a5": "weight"}, {"a1": "Paul Smith", "a2": 50, "a3": 160, "a4": 60, "a5": "height"}, {"a1": "Herr Schmidth Gold", "a2": 50, "a3": 210, "a4": 60, "a5": "height"}, {"a1": "Paul Smith", "a2": 5, "a3": 160, "a4": 60, "a5": "age"}], "outputs": ["David Jones is age 25", "Paul Smith weighs 60 kg", "Paul Smith is 160 cm", "Herr Schmidth Gold is 210 cm", "Paul Smith is age 5"], "max_gen_length": 128, "category": "class", "name": "Class definition", "description": "Create POJO class.", "id": "12"}
{"prompts": ["Create a function \"num_len\" that takes a number num and returns its length. E.g., number_length(5000) = 4.", "Initialize a last \"my_list\" with the values {a1}", "Print the longest number in this list."], "inputs": [{"a1": "[1, 2, 3, 12]"}, {"a1": "[-123, 2, 3, 12]"}, {"a1": "[1]"}, {"a1": "[-12, 1]"}, {"a1": "[1, 22, 333, 4444, -55555]"}], "outputs": [12, -123, 1, -12, -55555], "max_gen_length": 128, "category": "math", "name": "Longest number", "description": "Print longest number.", "id": "13"}
{"prompts": ["Import the class LinearRegression from sklearn.", "Import math.", "Assign integers ranging from 0 to 10 (inclusive) to \"x\".", "Define a function \"f\" that multiplies a input argument by 2.", "Create a numpy array of numbers \"y\" by applying f to each element of x.", "Initialize a linear regression model.", "Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).", "Predict a variable \"x_hat\" at x=[[{a1}]] using the fitted model.", "Apply ceil() to the predicted value and print it as an integer."], "inputs": [{"a1": "1"}, {"a1": "2"}, {"a1": "3"}, {"a1": "4"}, {"a1": "5"}], "outputs": [2, 4, 6, 8, 10], "max_gen_length": 128, "category": "data science", "name": "Linear regression", "description": "Fit linear regression model with specified function and sk-learn.", "id": "14"}
{"prompts": ["Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.", "Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.", "Assign \"{a1}\" to a variable named \"original_text\".", "Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'.", "Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'.", "Create a list named \"my_result\" containing restored_text and encrypted_text as elements.", "Print the list."], "inputs": [{"a1": "hi"}, {"a1": "asdfghjkl"}, {"a1": "gf"}, {"a1": "Hello World"}, {"a1": "This is a LONG string for our encryption algOrithm."}], "outputs": [["hi", "jk"], ["asdfghjkl", "cufhijlmn"], ["gf", "ih"], ["Hello World", "Hgnnq Wqtnf"], ["This is a LONG string for our encryption algOrithm.", "Tjku ku c LONG uvtkpi hqt qwt gpetarvkqp cniOtkvjo."]], "max_gen_length": 128, "category": "algorithm", "name": "Encrypt and decrypt", "description": "Rotate alphabet for encryption. Write a function for decryption (inverse of encrypt()). Concat should give identity function.", "id": "15"}
{"prompts": ["Defines a class \"Person\" which takes name and id as constructor arguments.", "Extend the class with a function __hash__ which uses the {a1} property as hash value.", "Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.", "Create a list \"persons\" with instances of Person and names \"Person A\", \"Person B\", \"Person {a3}\" and ids {a2}.", "Create a set \"unique_persons\" of this list.", "Print the number of elements in the set."], "inputs": [{"a1": "id", "a2": "1, 2, 2", "a3": "C"}, {"a1": "name", "a2": "1, 2, 2", "a3": "C"}, {"a1": "id", "a2": "2, 2, 2", "a3": "C"}, {"a1": "id", "a2": "1, 2, 3", "a3": "C"}, {"a1": "name", "a2": "1, 1, 1", "a3": "B"}], "outputs": [2, 3, 1, 3, 2], "max_gen_length": 128, "category": "class", "name": "Compare object equivalence", "description": "Implement a class with __hash__ and obtain a count unique objects.", "id": "16"}
{"prompts": ["Python got drunk and the built-in functions str() and int() are acting odd: \n# str(4) = 4\n# str(\"4\") = 4\n# int(\"4\") = \"4\"\n# int(4) = \"4\".", "Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = \"4\".", "Create a function called str_to_int() that converts integers into strings. E.g., str_to_int(\"4\") = 4.", "Create a list named \"my_result\" with elements int_to_str({a1}) and str_to_int(\"{a1}\").", "Print the list."], "inputs": [{"a1": "29348"}, {"a1": "1"}, {"a1": "123"}, {"a1": "2344"}, {"a1": "-1"}], "outputs": [[29348, "29348"], [1, "1"], [123, "123"], [2344, "2344"], [-1, "-1"]], "max_gen_length": 128, "category": "string", "name": "Drunken python", "description": "Overload built-in functions, and write functions which correct drunken functions.", "id": "17"}
{"prompts": ["Initialize dictionary of Morse codes named 'chars_to_dots' with values ['A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-','Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----','1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....','6': '-....', '7': '--...', '8': '---..', '9': '----.','&': '.-...', \"'\": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-','-': '-....-', '+': '.-.-.', '\"': '.-..-.', '?': '..--..', '/': '-..-.']", "Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.", "Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.", "Encode '{a1}' to morse code and assign the result to 'morse_code'.", "Decode the variable named 'morse_code' to a string named 'decoded_text'.", "Print the variable named 'decoded_text'."], "inputs": [{"a1": "Hello World"}, {"a1": "Hello Foo"}, {"a1": "Hello WORLD"}, {"a1": "foo BAR"}, {"a1": "This is a long string"}], "outputs": ["HELLO WORLD", "HELLO FOO", "HELLO WORLD", "FOO BAR", "THIS IS A LONG STRING"], "max_gen_length": 512, "category": "algorithm", "name": "Morse code", "description": "Encode a string into morse code given its conversion rule.", "id": "18"}
{"prompts": ["Initialize a list of integers with {a1} and a variable named target with a value of {a2}.", "Implement a function \"two_sum\" solving two sum problem given a list of integers and a target argument.", "Run the function and print out the result."], "inputs": [{"a1": "[0,1,2,3]", "a2": "4"}, {"a1": "[1, 11, 111]", "a2": "122"}, {"a1": "[-1, 0, 2, 4]", "a2": "3"}, {"a1": "[10, 20, 30, 40]", "a2": "70"}, {"a1": "[-1, -1, 123, -123]", "a2": "0"}], "outputs": [[1, 3], [1, 2], [0, 3], [2, 3], [2, 3]], "max_gen_length": 128, "category": "algorithm", "name": "Two-sum", "description": "Implement the two-sum problem on a given input pair.", "id": "19"}
{"prompts": ["Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).", "Call the function to sample 100 points named points1 centered at ({a1}, {a1}) with standard deviation (1, 1).", "Call the function to sample 100 points named points2 centered at (-{a1}, -{a1}) with standard deviation (1, 1).", "Concatenate these data points.", "Implement the k-means clustering algorithm with n iterations and the centroids as return value.", "Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to \"my_centroids\".", "Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of \"(x1, y1), (x2, y2)\"."], "inputs": [{"a1": 10}, {"a1": 20}, {"a1": 30}, {"a1": 40}, {"a1": 50}], "outputs": ["(-10, -10), (10, 10)", "(-20, -20), (20, 20)", "(-30, -30), (30, 30)", "(-40, -40), (40, 40)", "(-50, -50), (50, 50)"], "max_gen_length": 256, "category": "data science", "name": "k-means", "description": "Implement and run k-means on sampled points.", "id": "20"}
{"prompts": ["Define a list of integers named \"elements\" with values {numbers}.", "Calculate the sum of the even numbers of the list and store the result to variable \"even\".", "Calculate the sum of the odd numbers in the same list and store the result to \"odd\".", "Create a list named \"my_result\" containing the variables even and odd.", "Print the list."], "inputs": [{"numbers": [1]}, {"numbers": [2e+100, 5e+100, -11, 10]}, {"numbers": []}, {"numbers": [-5, 1, 6, -25, -36, 6]}, {"numbers": [73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10]}], "outputs": [[0, 1], [7e+100, -11], [0, 0], [-24, -29], [270, 813]], "max_gen_length": 128, "category": "math", "name": "Even odd sum", "description": "Print the sum of even and odd numbers in an array.", "id": "21"}
{"prompts": ["Define a list named \"elements\" with the values {lst}.", "Count the number of zeros in variable elements and store the value into variable \"zero_count\".", "Scan through the list in order and remove all the zeros, store the result into variable \"non_zero\".", "Merge the variable non_zero and a new list containing \"zero_count\" 0s and store the result to \"result\". Print the variable \"result\"."], "inputs": [{"lst": ["a", "b", "c", "d", "e", "f", "g"]}, {"lst": ["a", 0, 0, "b", "c", "d", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]}, {"lst": [0]}, {"lst": [-1, 0, 1e-05, 0, 1e-30, 0]}, {"lst": [0, 1, null, 2, false, 1, 0]}], "outputs": [["a", "b", "c", "d", "e", "f", "g"], ["a", "b", "c", "d", 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [-1, 1e-05, 1e-30, 0, 0, 0], [1, null, 2, false, 1, 0, 0]], "max_gen_length": 128, "category": "array", "name": "Shift zeros", "description": "Move all the zeroes in a list to the right.", "id": "22"}
{"prompts": ["Import numpy and initialize a numpy array named X with values {array}.", "Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.", "Call the function {n} times and stack the arrays into a new 2d array named \"samples\".", "Calculate the mean of each element in variable \"sample\" and store the result to \"mean\".", "Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named \"percentile\".", "Print the variable \"percentile\"."], "inputs": [{"array": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "n": 1000}, {"array": "consisting of 1000 randomly sampled integers ranging from 0 to 10", "n": 1000}, {"array": "consisting of 1000 randomly sampled integers ranging from 0 to 10", "n": 10000}, {"array": "consisting of 1000 uniformly sampled floats in [0, 1)", "n": 1000}, {"array": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "n": 100}], "outputs": [[20.525, 28.575], [4.8025, 5.1975], [4.8025, 5.1975], [0.4825, 0.5175], [1, 1]], "max_gen_length": 128, "category": "data science", "name": "Bootstrap 95% CI", "description": "Define an array, sample N times, calculate means, calculate the percentile.", "id": "23"}
{"prompts": ["Given two positive integers {a} and {b}, store the even single digits between a and b (inclusive) as \"my_digits\".", "Assign the sum of the even digits to the variable \"result\".", "Print the resulting number as integer."], "inputs": [{"a": 8, "b": 2}, {"a": 2, "b": 8}, {"a": 2, "b": 6}, {"a": 132, "b": 6}, {"a": 17, "b": 96}], "outputs": [20, 20, 12, 14, 0], "max_gen_length": 128, "category": "math", "name": "Sum even digits", "description": "Sum even digits between two numbers.", "id": "24"}
{"prompts": ["Find the maximum element in the list {A} and assign it to variable \"my_max\".", "Find the minimum element in the same list.", "Compute the different between \"my_max\" and the minimum element.", "Print the difference"], "inputs": [{"A": [0, 4]}, {"A": [4, 0]}, {"A": [0]}, {"A": [0, 7, 6]}, {"A": [2, 4, 7, 20, 6]}], "outputs": [4, 4, 0, 7, 18], "max_gen_length": 128, "category": "array", "name": "Min-max diff", "description": "Compute the difference between maximum and minimum numbers in a list.", "id": "25"}
{"prompts": ["Assign the string \"{A}\" to a variable named \"my_string\".", "Lowercase the given string \"my_string\".", "Assign the distinct characters of the string to a variable named \"chars\".", "Sort these characters in alphabetical order.", "Print the resulting list of characters."], "inputs": [{"A": "abcde"}, {"A": "abcdecadeCADE"}, {"A": "aaaaAAAAaaaa"}, {"A": "Jerry jERRY JeRRRY"}, {"A": "ddddc"}], "outputs": [["a", "b", "c", "d", "e"], ["a", "b", "c", "d", "e"], ["a"], [" ", "e", "j", "r", "y"], ["c", "d"]], "max_gen_length": 128, "category": "string", "name": "Distinct chars", "description": "Print the sorted, case-insensitive unique characters of a string.", "id": "26"}
{"prompts": ["Create two variables \"a\" and \"b\" for the strings \"{A}\" and \"{B}\", respectively.", "Define a function \"len_str\" that returns the length of a string.", "Assign the length of each string to a seperate variable.", "Assign the longer string to the variable \"result\".", "Print the resulting string."], "inputs": [{"A": "abcde", "B": "ab"}, {"A": "ab", "B": "abcde"}, {"A": "a", "B": "aa"}, {"A": "aaaaaaaaaa", "B": "cdeee"}, {"A": "f", "B": "gg"}], "outputs": ["abcde", "abcde", "aa", "aaaaaaaaaa", "gg"], "max_gen_length": 128, "category": "string", "name": "Longer string", "description": "Compare and print the longer string given two strings.", "id": "27"}
{"prompts": ["Assign the positive floating point number {A} to a variable \"f\".", "Compute the integer part of the number as variable \"a\".", "Assign the digits of the fractional part of the floating point number to an integer variable \"b\".", "Add them together and print the result."], "inputs": [{"A": 17.82}, {"A": 1.1}, {"A": 1000000.0000001}, {"A": 0.0101}, {"A": 100.5}], "outputs": [99, 2, 1000001, 101, 105], "max_gen_length": 128, "category": "math", "name": "Sum float digits", "description": "Sum numbers before an after the decimal point of a float.", "id": "28"}
{"prompts": ["Assign the string value {s} to a variable \"my_string\".", "Lowercase the defined string.", "Count the number of vowels", "Print out the number"], "inputs": [{"s": "CelebrAtion"}, {"s": "PaLm"}, {"s": "PrEdictiOn"}, {"s": ""}, {"s": "ABC"}], "outputs": [5, 1, 4, 0, 1], "max_gen_length": 128, "category": "string", "name": "Count vowels", "description": "Count the number of vowels in a string.", "id": "29"}
{"prompts": ["Assign the positive integer {n} to a variable \"f\".", "Create a list from 1 to \"f\" (inclusive).", "Create and initialize a variable named \"factorial\".", "Compute the product of all the values in the list and assign the product to \"factorial\".", "Print out the variable \"factorial\"."], "inputs": [{"n": 2}, {"n": 4}, {"n": 10}, {"n": 1}, {"n": 5}], "outputs": [2, 24, 3628800, 1, 120], "max_gen_length": 128, "category": "math", "name": "Factorial", "description": "Compute the factorial of n.", "id": "30"}
{"prompts": ["Given two positive integers, {a} {b}, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable \"two-edges\".", "Compute the maximum length of the third edge by substracting 1 from \"two-edges\" and store the value in a variable \"maximum-edge\".", "Compute the minimum length of the third edge and store the value in a variable \"minimum-edge\".", "Assign value of maximum-edge and minimum-edge to a tuple named \"my_tuple\".", "Print the variable \"my_tuple\"."], "inputs": [{"a": 8, "b": 9}, {"a": 5, "b": 7}, {"a": 9, "b": 2}, {"a": 1, "b": 1}, {"a": 1000, "b": 1000}], "outputs": [[17, 2], [11, 3], [10, 8], [1, 1], [1999, 1]], "max_gen_length": 128, "category": "math", "name": "Max edge triangle", "description": "Finds the maximum range of a triangle's third edge.", "id": "31"}
{"prompts": ["Compute factorial", "Implement a function to compute the remainder when dividing a number by 10", "Print out the remainder when dividing the factorial of {n} by 10"], "inputs": [{"n": 2}, {"n": 4}, {"n": 10}, {"n": 1}, {"n": 5}], "outputs": [2, 4, 0, 1, 0], "max_gen_length": 128, "category": "math", "name": "Factorial and remainder", "description": "Compute the factorial and its remainder when divided.", "id": "32"}
{"prompts": ["Given a positive integer {n} and create a variable named \"n\" with this value", "Compute the the total sum of internal angles in degrees of a regular-polygon with \"n\" sides", "Convert the angle from degrees to radians", "Round the angle to have two decimal digits", "Print out the angle"], "inputs": [{"n": 3}, {"n": 4}, {"n": 1000}, {"n": 10}, {"n": 100}], "outputs": [3.14, 6.28, 3135.31, 25.13, 307.88], "max_gen_length": 128, "category": "math", "name": "Sum polygon angles", "description": "Sum the angles in a polygon.", "id": "33"}
{"prompts": ["Assign two strings {s1} and {s2} to the variable named s1 and the variable named s2 respectively", "Convert s1 and s2 to integers", "Compute the sum of the two integers and store it as the variable s", "Print out the variable s"], "inputs": [{"s1": "111", "s2": "222"}, {"s1": "2", "s2": "4"}, {"s1": "0", "s2": "12"}, {"s1": "50", "s2": "100"}, {"s1": "10000", "s2": "1"}], "outputs": [333, 6, 12, 150, 10001], "max_gen_length": 128, "category": "string", "name": "Sum string numbers", "description": "Add together two numbers represented in string.", "id": "34"}
{"prompts": ["Initialize the variable named lst with an integer list {l}.", "Find the maximum of the variable lst and assign it to a variable named ma.", "Find the minimum of the variable lst and assign to a variable named mi.", "Create a list from mi and ma (inclusive).", "Print the sum of this list."], "inputs": [{"l": [4, 3, 8, 2]}, {"l": [17, 16, 15, 10, 11, 12]}, {"l": [1, 2]}, {"l": [10]}, {"l": [1, 100]}], "outputs": [35, 108, 3, 10, 5050], "max_gen_length": 128, "category": "array", "name": "Min-max sum", "description": "Sum the range from the minimum to the maximum of a list.", "id": "35"}
{"prompts": ["Implement a function to return the characters shared between two words.", "Implement a function to find the number of vowels in a string.", "Find the shared characters of {s1} and {s2}, concatenate them into a string, and assign it to a variable named s.", "Print the number of vowels in the variable s"], "inputs": [{"s1": "meaty", "s2": "apple"}, {"s1": "fan", "s2": "forsook"}, {"s1": "spout", "s2": "shout"}, {"s1": "happiness", "s2": "fitness"}, {"s1": "code", "s2": "fork"}], "outputs": [2, 0, 2, 2, 1], "max_gen_length": 128, "category": "string", "name": "Vowel overlap", "description": "Find the number of overlaped vowels of two words.", "id": "36"}
{"prompts": ["Given a list of integers {l}, assign the list to a varialbe named lst1.", "Find the negative numbers of the list and assign it to a new variable named lst2", "Compute the sum of numbers in lst2", "Print out the sum"], "inputs": [{"l": [-1, -2, 0, 1, 5]}, {"l": [5, 2, 0, 5, 10]}, {"l": [-100, -20, -3, 0, 0]}, {"l": [-23, -2, -5, 1000, 23, -10, -100, -10]}, {"l": [5, 1000, 0, 1, 0, 0, 0, 1, 1]}], "outputs": [-3, 0, -123, -150, 0], "max_gen_length": 128, "category": "math", "name": "Sum neg", "description": "Sum of negative numbers in a list.", "id": "37"}
{"prompts": ["Import the pandas library.", "Read a dataframe \"df\" from the csv file located in \"./datasets/mlbootcamp5_train.csv\".", "Group by the column \"gender\" and assign the value counts for \"{a1}\" to a variable named \"my_counts\".", "Assign the attribute \"values\" of this variable and to a new variable named \"plain_list\".", "Print the maximum element of this list."], "inputs": [{"a1": "alco"}, {"a1": "age"}, {"a1": "smoke"}, {"a1": "active"}, {"a1": "weight"}], "outputs": [44369, 25, 44717, 36516, 2770], "max_gen_length": 128, "category": "data science", "name": "Load dataset", "description": "Load from a file and print statistics.", "id": "38"}
{"prompts": ["Define a string named 's' with the value '{s}'.", "Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'", "Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'", "Split the string 's2' into a list of words with a space and store the result to variable 'words'", "Print a list of integers consisting of the length of each word in 'words'"], "inputs": [{"s": "Hello, World!"}, {"s": "Raising Skinny Elephants Is Utterly Boring"}, {"s": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. "}, {"s": ",."}, {"s": "Wow! Is this a real sentence?"}], "outputs": [[5, 6], [7, 6, 9, 2, 7, 6], [5, 5, 5, 3, 4, 11, 10, 4, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6], [], [4, 2, 4, 1, 4, 9]], "category": "string", "name": "Char length list", "description": "Return a list of non-punctuation character lengths of a list of strings.", "id": "39"}
{"prompts": ["Create a variable named 's' with the value '{s}'.", "Lowercase the variable 's' and store the result to variable 's2'.", "Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.", "Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.", "Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise."], "inputs": [{"s": "#FFF"}, {"s": "#egacea"}, {"s": "#12"}, {"s": "123456"}, {"s": "#ffb600"}], "outputs": [true, false, false, false, true], "category": "math", "name": "Hex to RGB", "description": "Convert a six hexadecimal digit string into list of RGB values.", "id": "40"}
{"prompts": ["Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.", "Apply the function 'count_values' to the list '{lst}' and store the result to variable 'counts'.", "Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'."], "inputs": [{"lst": [1, 1, 2, 2, 2, 2]}, {"lst": []}, {"lst": [100, 100, 0]}, {"lst": [0, 0, 0, 0, 0, 1, 1, 1, 1]}, {"lst": [1, 2, 3, 4, 5, 6, 6, 6, 6, 6]}], "outputs": [2, null, 100, 0, null], "category": "array", "name": "Majority vote", "description": "Check if a certain element is the majority of a given list.", "id": "41"}
{"prompts": ["Import datetime and initialize a datetime object named 'today' with {month}/{day}/{year} (month/day/year).", "Add 7 days to the variable 'today' and store the result to variable 'week'.", "Print 'week' in the format '%m/%d/%Y'."], "inputs": [{"year": 1990, "month": 1, "day": 28}, {"year": 2000, "month": 2, "day": 26}, {"year": 2022, "month": 12, "day": 28}, {"year": 1274, "month": 11, "day": 5}, {"year": 1600, "month": 7, "day": 30}], "outputs": ["02/04/1990", "03/04/2000", "01/04/2023", "11/12/1274", "08/06/1600"], "category": "string", "name": "Week later", "description": "Print the formatted date of a week later given a date.", "id": "42"}
{"prompts": ["Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.", "Given a list of strings named 'words' with the value {words}', apply the function 'word_weight' to each word and store the result to variable 'weights'.", "Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'."], "inputs": [{"words": ["apple", "banana", "carrot"]}, {"words": ["I'll", "see", "trees."]}, {"words": ["a...", "b?", "c!", "d"]}, {"words": ["", "a", "A"]}, {"words": ["ABC", "ghijklmno", "def"]}], "outputs": [true, true, true, false, false], "category": "math", "name": "Sorted word weights", "description": "Calculate the sum of ASCII values of each word and check if the list is sorted.", "id": "43"}
{"prompts": ["Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.", "Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.", "Define an integer variable named 'base' with the value {n}.", "While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'.", "Print 'False' if the variable 'base' is a single digit, otherwise print 'True'."], "inputs": [{"n": 123456}, {"n": 1234}, {"n": 123212}, {"n": 11211230}, {"n": 1112212124000131}], "outputs": [false, false, true, true, true], "category": "string", "name": "Create Palindrome", "description": "Sum pairs of adjacent digits until the number is palidrome.", "id": "44"}
{"prompts": ["Define a string variable named 'input' with the value '{input}', as well as an empty list named 'stack'.", "Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'.", "Print the joined string from 'stack'."], "inputs": [{"input": "he@@l@hel@llo"}, {"input": "@@@@"}, {"input": "si@@@t boy"}, {"input": "a@b@c@d@e@f@g@h@i@jkl"}, {"input": "hello   @@world"}], "outputs": ["hello", "", "t boy", "jkl", "hello world"], "category": "string", "name": "Simulate Backspace", "description": "Apply the backspace characters in a string and print the modified .", "id": "45"}
{"prompts": ["Import the pandas library.", "Import the function train_test_split from sklearn.model_selection.Read the dataframe \"df\" from the csv file './datasets/melb_data.csv'.", "Assign the attribute \"Price\" to the target variable \"y\".", "Drop the column \"Price\" from the dataframe on axis 1 and assign the result to a variable named \"melb_predictors\".", "From \"melb_predictors\" select and exclude columns of dtype \"object\" and name the result \"X\".", "Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of {a1}%, test set size of {a2}%, random_state=0.", "Print the sum of the first column of x_train and the sum of y_train. Use the format \"{{:.1f}} {{:.1f}}\"."], "inputs": [{"a1": 80, "a2": 20}, {"a1": 50, "a2": 50}, {"a1": 20, "a2": 80}, {"a1": 10, "a2": 90}, {"a1": 90, "a2": 10}], "outputs": ["31956.0 14607789799.0", "20086.0 14607789799.0", "7995.0 14607789799.0", "3948.0 14607789799.0", "35891.0 14607789799.0"], "max_gen_length": 128, "category": "data science", "name": "Pandas DF manipulation", "description": "Manipulate a pandas dataframe and split into train and test set.", "id": "46"}
{"prompts": ["Create a variable named lst1 with value {l}", "Find the minimum and maximum of lst1 and assign them to variables a and b respectively", "Create a list from a to b (inclusive) and assign it to variable named lst2", "Find the elements that are in lst2 but not in lst1", "Print the sum of these elements"], "inputs": [{"l": [1, 3, 5, 7, 10]}, {"l": [10, 7, 5, 3, 1]}, {"l": [10, 20, 30, 40, 50, 60]}, {"l": [-100, 100]}, {"l": [-5, -10, 0, 10]}], "outputs": [29, 29, 1575, 0, 5], "max_gen_length": 128, "category": "array", "name": "Sum non-overlap range", "description": "Sum the integers in a (min, max) range that don't appear in a list .", "id": "47"}
{"prompts": ["Initialize the variable named lst1 with a list {l}.", "Create a function called num_in_str() to check whether a string contains a number.", "Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2", "Print out lst2"], "inputs": [{"l": ["1a", "a", "2b", "b"]}, {"l": ["abc", "abc10"]}, {"l": ["abc", "ab10c", "a10bc", "bcd"]}, {"l": ["this is a test", "test1"]}, {"l": ["t0t", "11", "0"]}], "outputs": [["1a", "2b"], ["abc10"], ["ab10c", "a10bc"], ["test1"], ["t0t", "11", "0"]], "max_gen_length": 256, "category": "array", "name": "Detect digits", "description": "Find if a string contains digits.", "id": "48"}
{"prompts": ["Define a function \"a\" that multiplies an integer argument by {a1} and returns the result.", "Define a function \"b\" that multiplies an integer argument by {a2} and returns the result.", "Define a function \"c\" that multiplies an integer argument by {a3} and returns the result.", "Create a list named \"abc\" which contains the three functions in order of definition.", "Assign the integer {a4} to a variable \"my_init\".", "Apply the first function of the list to \"my_init\" and name the result \"my_result\".", "For each subsequent function in the list, take the result of the previous function as input argument and assign the result to \"my_result\".", "Print the variable named \"my_result\"."], "inputs": [{"a1": "2", "a2": "2", "a3": "2", "a4": "1"}, {"a1": "1", "a2": "1", "a3": "2", "a4": "1"}, {"a1": "2", "a2": "2", "a3": "2", "a4": "2"}, {"a1": "-2", "a2": "2", "a3": "2", "a4": "1"}, {"a1": "-2", "a2": "-2", "a3": "2", "a4": "1"}], "outputs": [8, 2, 16, -8, 8], "max_gen_length": 128, "category": "math", "name": "Cascading functions", "description": "Sequentially invoke function objects in a list.", "id": "49"}
{"prompts": ["This function \"to_plural\" takes list of words in the singular form and returns a set of those words in the plural form adding an \"s\" to the end of the words, if they appear more than once in the list. E.g., pluralize([\"cow\", \"pig\", \"cow\", \"cow\"]) = {{\"cows\", \"pig\"}}, pluralize([\"table\", \"table\", \"table\"]) = {{\"tables\"}}.", "Create a function \"is_plural\" which returns True if the word passed as argument is in plural form.", "Assign {a1} to a variable named \"words\".", "Apply the function that returns plural forms to the variable \"words\" and name the result \"words_plural\".", "Define a boolean \"contains_plural\" and apply \"is_plural\" to each element of \"words_plural\" to detect if at least one word is in plural form.", "Print out whether or not \"words_plural\" contains a word in plural as boolean."], "inputs": [{"a1": "[\"chair\", \"pencil\", \"arm\", \"arm\"]"}, {"a1": "[\"arm\", \"arm\", \"arm\", \"arm\"]"}, {"a1": "[\"chair\", \"arm\", \"pencil\", \"arm\"]"}, {"a1": "[\"chair\", \"pencil\", \"arm\"]"}, {"a1": "[\"chair\", \"pencil\", \"table\"]"}], "outputs": [true, true, true, false, false], "max_gen_length": 128, "category": "dict", "name": "Pluralize duplicates", "description": "Pluralize duplicated words in a list.", "id": "50"}
{"prompts": ["Assign the list of numbers \"{A}\" to a variable named \"my_relative_altitude\".", "Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.", "Find the larget number in the list my_net_altitude and print it out."], "inputs": [{"A": "[1,2,3,4]"}, {"A": "[-1,2,3,4]"}, {"A": "[-1,-2,-3,-4]"}, {"A": "[-1000000, 1, 2]"}, {"A": "[-5, 1, 5, 0, -10]"}], "outputs": [10, 8, 0, 0, 1], "max_gen_length": 128, "category": "array", "name": "Highest altitude", "description": "Given relative altitudes , find the highest altitude.", "id": "51"}
{"prompts": ["Assign the list of words \"{A}\" to a variable named \"my_sentences\".", "Assign an integer \"{K}\" to a variable named \"k\".", "Truncate the list such that it contains k words and store as truncated_list", "Print out the variable truncated_list ."], "inputs": [{"A": ["hello", "world"], "K": 1}, {"A": ["hello", "how", "are", "you", "Jim"], "K": 4}, {"A": ["China", "is", "a", "large", "country"], "K": 1}, {"A": ["yes", "yes", "yes", "yes", "yes"], "K": 4}, {"A": ["what", "is", "your", "name"], "K": 1}], "outputs": [["hello"], ["hello", "how", "are", "you"], ["China"], ["yes", "yes", "yes", "yes"], ["what"]], "max_gen_length": 128, "category": "array", "name": "Truncate words", "description": "Truncate a sentence so that it contains k words.", "id": "52"}
{"prompts": ["Assign the list of integers \"{A}\" to a variable named \"my_numbers\".", "Count the frequencies of the integers in my_numbers.", "Find the integer that the frequency is 1 and store as one_time.", "Print out the variable one_time."], "inputs": [{"A": [1, 2, 2, 2]}, {"A": [-1, 4, 4, 4, 4, 4]}, {"A": [-1, -4, 8, -4, 8]}, {"A": [-1000000, 1, 1]}, {"A": "[10000, 2, 2, 2,2,2]"}], "outputs": [1, -1, -1, -1000000, 10000], "max_gen_length": 128, "category": "array", "name": "Single element", "description": "Find the elements that appear one time in an array.", "id": "53"}
{"prompts": ["Assign the list of integers \"{A}\" to a variable named \"my_numbers\".", "Assign an integer \"{Val}\" to a variable named \"val\".", "Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.", "Print out the variable remove_numbers."], "inputs": [{"A": [1, 2, 2, 2], "Val": 2}, {"A": [-1, 4, 4, 4, 4, 4], "Val": 4}, {"A": [-1, -4, 8, -4, 8], "Val": -1}, {"A": [-1000000, 1, 1], "Val": 1}, {"A": "[10000, 2, 2, 2,2,2]", "Val": 2}], "outputs": [[1], [-1], [-4, 8, -4, 8], [-1000000], [10000]], "max_gen_length": 128, "category": "array", "name": "Remove elements", "description": "Remove all the occurrences of an element in an array.", "id": "54"}
{"prompts": ["Assign the list of integers \"{A}\" to a variable named \"my_numbers\".", "Assign an integer \"{Val}\" to a variable named \"val\".", "Sum all the number in my_numbers and store as sum_numbers.", "Check whether the sum_numbers is equal to val. If yes, return \"True\", otherwise return \"False\"."], "inputs": [{"A": [1, 2, 2, 2], "Val": 2}, {"A": [-1, 5], "Val": 4}, {"A": [-1, -1, -1, -1, 1], "Val": -5}, {"A": [-1000000, 1, 1], "Val": 1}, {"A": "[10000, 2, 2, 2,2,2]", "Val": 2}], "outputs": ["False", "True", "True", "False", "False"], "max_gen_length": 128, "category": "array", "name": "Check array sum", "description": "Check whether the sum of an array is equal to a given value.", "id": "55"}
{"prompts": ["Assign a sorted list \"{A}\" to a variable named \"my_numbers1\".", "Assign a sorted list \"{B}\" to a variable named \"my_numbers2\".", "Merge the two sorted lists in a new sorted list and store as new_list.", "Print the sorted new_list."], "inputs": [{"A": [1, 2, 2, 2], "B": [3, 4]}, {"A": [-1, 5], "B": [1, 2]}, {"A": [-1, -1, -1, -1, 1], "B": [-1, 8]}, {"A": [-1000000, 1, 1], "B": [1, 6]}, {"A": "[2, 2,2,2,2, 10000]", "B": [-2, -1]}], "outputs": [[1, 2, 2, 2, 3, 4], [-1, 1, 2, 5], [-1, -1, -1, -1, -1, 1, 8], [-1000000, 1, 1, 1, 8], [-2, -1, 2, 2, 2, 2, 2, 10000]], "max_gen_length": 128, "category": "algorithm", "name": "Merge sorted lists", "description": "Merge two sorted lists into one.", "id": "56"}
{"prompts": ["Assign an integer array \"{A}\" to a variable named \"my_array\".", "Find the contiguous subarray of my_array with the largest sum and store as max_subarray.", "Compute the sum of max_subarray and store as sum_subarry.", "Print out the variable sum_subarray."], "inputs": [{"A": [1]}, {"A": [-1, 5]}, {"A": [-1, -1, -1, -1, 1]}, {"A": [-1000000, 1, 1]}, {"A": "[2, 2,2,2,2, 10000]", "B": [-2, -1]}], "outputs": [1, 5, 1, 2, 10010, -1], "max_gen_length": 128, "category": "algorithm", "name": "Maximum subarray", "description": "Find the max contiguous subarray and return the sum.", "id": "57"}
{"prompts": ["Assign the positive number \"{A}\" to a variable named \"my_number\".", "Compute the squre root of the number and store as square_root. ", "Compute the largest integer but not larger than square_root and store as largest_square_root.", "Print the integer largest_square_root."], "inputs": [{"A": 1}, {"A": 5}, {"A": 101}, {"A": 30}, {"A": 10000}], "outputs": [1, 2, 10, 5, 100], "max_gen_length": 128, "category": "algorithm", "name": "Max square root integer", "description": "Compute the largest integer but not larger than square root of one positive number.", "id": "58"}
{"prompts": ["Assign the list of words \"{A}\" to a variable named \"my_words\".", "Count the length of the words in the list and store as a dictionary word_count. ", "Find the element with the largest count in dictionary word_count and store as longest_word.", "print the variable longest_word."], "inputs": [{"A": ["Hello", "word"]}, {"A": ["a", "good", "place"]}, {"A": ["the", "last", "word", "in", "the", "sentence"]}, {"A": ["good"]}, {"A": ["There", "will", "be", "a", "joy"]}], "outputs": ["Hello", "place", "sentence", "good", "There"], "max_gen_length": 128, "category": "algorithm", "name": "Longest word", "description": "Find the longest word in a word list.", "id": "59"}
{"prompts": ["Assign the list of numbers \"{A}\" to a variable named \"my_numbers\".", "Return the elements that appears exactly once in the above list and store as my_uniques.", "Compute the sum of the list my_uniques and print it out."], "inputs": [{"A": "[1,2,3]"}, {"A": "[1,1,1,1]"}, {"A": "[-1,-2,-3,-3]"}, {"A": "[-1000000, 1, 1, 2,2,3,3,3,3]"}, {"A": "[-5, 1, -5, 0, -10]"}], "outputs": [6, 0, -3, -1000000, -9], "max_gen_length": 128, "category": "algorithm", "name": "Sum unique elements", "description": "Sum all the unique numbers in a list.", "id": "60"}
{"prompts": ["Assign the matrix \"{A}\" to a variable named \"my_matrix\".", "Find the diagonal elements of my matrix and store as diag_elements.", "print out the sum of the variable diag_elements."], "inputs": [{"A": [[3, 2], [2, 3]]}, {"A": [[3, 2, 5], [2, 3, 5]]}, {"A": [1]}, {"A": [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {"A": [5, 5, 5, 5, 5, 0]}], "outputs": [6, 6, 1, 60001, 5], "max_gen_length": 128, "category": "data science", "name": "Digonal sum", "description": "Compute the digonal sum of a matrix.", "id": "61"}
{"prompts": ["Assign the matrix \"{A}\" to a variable named \"my_matrix\".", "Assign the number \"{T}\" to a variable named \"t\".", "Compute the condition number of my_matrix and store as result.", "Check whether the result is smaller than t. If yes, return \"True\", otherwise return \"False\"."], "inputs": [{"A": [[3, 2], [2, 3]], "T": 1}, {"A": [[3, 2, 5], [2, 3, 5]], "T": -1}, {"A": [[1, 5]], "T": 2}, {"A": [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], "T": 100}, {"A": [[5, 5, 5, 5, 5, 0]], "T": 0.5}], "outputs": ["False", "False", "True", "False", "False"], "max_gen_length": 128, "category": "data science", "name": "Matrix condition number", "description": "Check conditon number of a matrix is less than a threshold.", "id": "62"}
{"prompts": ["Assign the matrix \"{A}\" to a variable named \"a\".", "Assign the matrix \"{B}\" to a variable named \"b\".", "Compute the multiplication of two matrices and store as result.", "Compute the sum of the result and print it out."], "inputs": [{"A": [[3, 2], [2, 3]], "B": [[3, 2], [2, 3]]}, {"A": [[3, 2, 5], [2, 3, 5]], "B": [[1, 0], [0, 1], [2, -2]]}, {"A": [[1, 5, 67, -1]], "B": [[-1], [0], [0], [-1]]}, {"A": [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], "B": [[1, 0, 6], [0, 1, 5], [0, 1, 4]]}, {"A": [[5, 5, 5, 5, 5, 0]], "B": [[-1], [-1], [-1], [-1], [-1], [1000]]}], "outputs": [50, 10, 0, 1170015, -25], "max_gen_length": 128, "category": "data science", "name": "Matrix multiplication sum", "description": "Compute matrix multiplication sum of two matrices.", "id": "63"}
{"prompts": ["Assign the matrix \"{A}\" to a variable named \"a\".", "Assign the matrix \"{B}\" to a variable named \"b\".", "Implement a function that computes the determinant of a matrix.", "Check whether the determinant of matrix a is large than matrix b. If yes, print \"True\", otherwise print \"False\"."], "inputs": [{"A": [[3, 2], [2, 3]], "B": [[3, 2], [2, 2]]}, {"A": [[3, 2, 5], [2, 3, 5], [3, 5, 6]], "B": [[3, 2], [2, -3]]}, {"A": [[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]], "B": [[0, 0], [1, 4]]}, {"A": [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]], "B": [[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]}, {"A": [[1, 0, 6], [0, 1, 5], [0, 1, 4]], "B": [[1, 0], [0, 1]]}], "outputs": ["True", "True", "False", "False", "False"], "max_gen_length": 128, "category": "data science", "name": "Matrix determinant ", "description": "Compare two matrix determinants.", "id": "64"}
{"prompts": ["Assign the list of numbesr \"{A}\" to a variable named \"my_numbers\".", "Implement a function that computes the exponential output of a list.", "Implement a function that computes summation of a list.", "Implement a function that computes log of a number.", "Print out the log of sum exponential my_numbers."], "inputs": [{"A": [1, 3, 2, 2]}, {"A": [1000, 1000, 1000]}, {"A": [0, 0.2, 0.4, -0.2]}, {"A": [1, 0, 0, 1, 3, 2, 0, 0.2]}, {"A": [0, 3, 1, 3, 2, 2, -0.2, 0.2]}], "outputs": [3.6265233750364456, 1001.0986122886682, 1.5111541217815447, 3.6144941975988285, 4.106068918955366], "max_gen_length": 128, "category": "data science", "name": "Log-sum-exp", "description": "Compute the log of sum exponential input.", "id": "65"}
{"prompts": ["Assign the list of points \"{A}\" to a variable named \"my_points\".", "Assign the integer \"{K}\" to a variable named \"k\".", "Implement a function that computes the distance between a point and the origin (0,0).", "Implement a function that computes the k closest points in an array to the origin and store as result.", "Compute the k closest points in my_points and print them out."], "inputs": [{"A": [[1, 3], [2, 2]], "K": 1}, {"A": [[0, 0], [1, 4], [-4, 6], [7, -1]], "K": 1}, {"A": [[0, 0], [1, 4], [-4, 6], [7, -1]], "K": 2}, {"A": [[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]], "K": 2}, {"A": [[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]], "K": 1}], "outputs": [[2, 2], [0, 0], [[0, 0], [1, 4]], [[0, 0.2], [0.4, -0.2]], [-0.2, 0.2]], "max_gen_length": 128, "category": "array", "name": "K nearest points", "description": "Find the k nearest points to the origin.", "id": "66"}
{"prompts": ["Implement a function called LCP() to find the longest common prefix of two strings", "Initialize a variable named lst1 with a list {l1}.", "Apply the function LCP() recusively to lst1", "Print the the longest common prefix of the strings in lst1"], "inputs": [{"l1": ["apple", "ape", "april"]}, {"l1": ["crazy", "car"]}, {"l1": ["small", "smart", "smile"]}, {"l1": ["inbox", "income", "input", "insight"]}, {"l1": ["come", "combine", "continue", "compute"]}], "outputs": ["ap", "c", "sm", "in", "co"], "max_gen_length": 256, "category": "algorithm", "name": "Longest common prefix", "description": "Find the longest common prefix of two strings.", "id": "67"}
{"prompts": ["Assigns a list {lst1} to a variable named lst1", "Create a frequency table of elements in lst1", "Find the elements with frequency larger than 1 and assign them to a list lst2", "Print out lst2"], "inputs": [{"lst1": [2, 3, 1, 2, 3]}, {"lst1": ["a", "c", "b", "a"]}, {"lst1": [3, 3, 1, 1]}, {"lst1": ["d", "c", "d", "c", "e", "a"]}, {"lst1": [1, 2, 3]}], "outputs": [[2, 3], ["a"], [3, 1], ["d", "c"], []], "max_gen_length": 256, "category": "array", "name": "Duplicate elments", "description": "Find duplicates in a list.", "id": "68"}
{"prompts": ["Initialize a variable named w1 with a string '{w}'", "Get the first non-repeating character in w1", "Find its corresponding index and assign it to n1", "Print out n1"], "inputs": [{"w": "popular"}, {"w": "crunchy"}, {"w": "barbados"}, {"w": "alphabet"}, {"w": "science"}], "outputs": [1, 1, 2, 1, 0], "max_gen_length": 256, "category": "algorithm", "name": "First unique character", "description": "Find the first non-repeating character in a string.", "id": "69"}
{"prompts": ["Assign a sentence '{s1}' to a variable named sentence1.", "Assign a sentence '{s2}' to a variable named sentence2.", "Split sentence1 into words and assign them to words1.", "Split sentence2 into words and assign them to words2.", "Find the words that appear once in both words1 and words2 and assign them to uncommon_words.", "Print uncommon_words."], "inputs": [{"s1": "Geeks for Geeks", "s2": "Learning from Geeks for Geeks"}, {"s1": "apple banana mango", "s2": "banana fruits mango"}, {"s1": "Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.", "s2": "Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles."}, {"s1": "Seaborg was the principal or co-discoverer of ten elements.", "s2": "Seaborg was the principal or co-discoverer of ten elements."}, {"s1": "Heavy rainfall began in earnest around 8 April.", "s2": "rainfall began in earnest around 8 April."}], "outputs": [["Learning", "from"], ["apple", "fruits"], ["Berkeley", "Los", "Angeles"], [], ["Heavy"]], "max_gen_length": 256, "category": "algorithm", "name": "Uncommon words", "description": "Find uncommon words in two sentences.", "id": "70"}
{"prompts": ["Assign a sentence '{s1}' to a variable named sentence1.", "Split sentence1 into words and assign them to words1.", "Remove punctuation in words1.", "Compute the average word length in words1 and assign it avg.", "Print avg."], "inputs": [{"s1": "Hi all, my name is Tom...I am originally from Australia."}, {"s1": "I need to work very hard to learn more about algorithms in Python!"}, {"s1": "It received critical acclaim and continues to be praised by commentators."}, {"s1": "The Minute Man was intended to be placed on a local boulder by the town of Concord."}, {"s1": "During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium."}], "outputs": [4.5, 4.076923076923077, 5.636363636363637, 3.8823529411764706, 5.285714285714286], "max_gen_length": 256, "category": "algorithm", "name": "Average words length", "description": "Compute the average word length of a sentence.", "id": "71"}
{"prompts": ["Assigns strings {w1} and {w2} to variables w1 and w2 respectively", "Lower-case w1 and w2", "Count the frequency of letters in w1 and w2 and assign them to f1 and f2", "Print if f1 is equal to f2"], "inputs": [{"w1": "find", "w2": "ding"}, {"w1": "rat", "w2": "car"}, {"w1": "open", "w2": "book"}, {"w1": "fried", "w2": "fired"}, {"w1": "listen", "w2": "silent"}], "outputs": [false, false, false, true, true], "max_gen_length": 256, "category": "string", "name": "Compare char freq", "description": "Compare the character frequencies in two strings.", "id": "72"}
{"prompts": ["Assign a string {w} to a variable named w1", "Concatenate the elements in w1 from end to beginning and assign it to w2", "Print w2"], "inputs": [{"w": "abc"}, {"w": "ape"}, {"w": "geeksforgeeks"}, {"w": "apple"}, {"w": "april"}], "outputs": ["cba", "epa", "skeegrofskeeg", "elppa", "lirpa"], "max_gen_length": 256, "category": "string", "name": "Reverse string", "description": "Reverse a string.", "id": "73"}
{"prompts": ["Assign a natural number {n} to named num", "Create a list from 1 to num and assign it to a variable lst1", "Compute the sum of squared of the numbers in lst1 and assign n1", "Compute the sum of the numbers in lst1 and assign its square to n2", "Print out the difference between n1 and n2"], "inputs": [{"n": 12}, {"n": 2}, {"n": 10}, {"n": 5}, {"n": 100}], "outputs": [-5434, -4, -2640, -170, -25164150], "max_gen_length": 256, "category": "math", "name": "Square Sum diff", "description": "Calculate the difference between the squared sum and the sum of squares.", "id": "74"}
{"prompts": ["Assigns a list {lst1} to a variable named vec1", "Assigns a list {lst2} to a variable named vec2", "Normalize vec1", "Normalize vec2", "Compute the dot product of vec1 and vec2", "Print out the dot product"], "inputs": [{"lst1": [0.3, 1.0, 2.0], "lst2": [1.0, 2.0, 3.0]}, {"lst1": [10.0, 20.0, 30.0], "lst2": [0.1, 0.2, 0.3]}, {"lst1": [1.1, 2.1, 3.1], "lst2": [10.1, 20.2, 30.3]}, {"lst1": [1.0, 2.0], "lst2": [0.1, 0.2]}, {"lst1": [5.3, 1.1, 2.6, 1.2, 10.2], "lst2": [1.3, 2.5, 3.7, 4.8, 5.9]}], "outputs": [0.9832301408945487, 0.9999999999999999, 0.9998592903536574, 0.9999999999999999, 0.8032876127853769], "max_gen_length": 256, "category": "math", "name": "Cosine sim", "description": "Compute the cosine similarity between two vectors.", "id": "75"}
{"prompts": ["Assigns a list {lst1} to a variable named vec1", "Assigns a list {lst2} to a variable named vec2", "Assigns a list {lst3} to a variable named vec3", "Convert vec1, vec2, and vec3 to numpy array", "Implement a function called dist() to compute the distance between two vectors", "Compute the distance between vec1 and vec2 and assign it to d1", "Compute the distance between vec1 and vec3 and assign it to d2", "Print out whether d1 is larger than d2"], "inputs": [{"lst1": [0.0, 0.0, 0.0], "lst2": [1.0, 2.0, 3.0], "lst3": [0.1, 0.2, 0.3]}, {"lst1": [0.0, 0.0, 0.0], "lst2": [10.0, 20.0, 30.0], "lst3": [0.1, 0.2, 0.3]}, {"lst1": [0.0, 0.0, 0.0], "lst2": [1.1, 2.1, 3.1], "lst3": [10.1, 20.2, 30.3]}, {"lst1": [0.0, 0.0, 0.0, 0.0], "lst2": [-1.0, -2.0, -3.0, -10.0], "lst3": [0.1, 0.2, 0.3, 0.2]}, {"lst1": [0.0, 0.0], "lst2": [1.0, 2.0], "lst3": [0.1, 0.2]}], "outputs": [true, true, false, true, true], "max_gen_length": 256, "category": "math", "name": "Vector distance", "description": "Compare vector distances to the origin.", "id": "76"}
{"prompts": ["Initialize a variable named lst1 with a list {l1}.", "Initialize a variable named lst2 with a list {l2}.", "Create a function called std() to compute the standard deviation given a list of numbers.", "Call the function std() to calculate standard deviations for lst1 and lst2.", "Print out the smaller standard deviation."], "inputs": [{"l1": [1, 1, 1, 1, 1], "l2": [1, 2, 3, 4, 5]}, {"l1": [-1, -1, 1, 1], "l2": [100, 1, -100]}, {"l1": [-100, -10, 5, 5, -10], "l2": [100, 50, 20, -100]}, {"l1": [20, 1, 50, 6], "l2": [-100]}, {"l1": [5, 6, 9, 100], "l2": [-100, -100, -100, -100, -100]}], "outputs": [0.0, 1.0, 39.57, 0.0, 0.0], "max_gen_length": 256, "category": "data science", "name": "Compare standard deviations", "description": "Find the smaller standard deviation given two lists.", "id": "77"}
{"prompts": ["Initialize a variable named lst1 with a list {l1}.", "Initialize a variable named lst2 with a list {l2}.", "Create a function called mean() to compute the mean given a list of numbers.", "Call the function mean() to calculate means for lst1 and lst2.", "Print out the smaller mean."], "inputs": [{"l1": [1, 1, 1, 1, 1], "l2": [1, 2, 3, 4, 5]}, {"l1": [-1, -1, 1, 1], "l2": [100, 1, -100]}, {"l1": [-100, -10, 5, 5, -10], "l2": [100, 50, 20, -100]}, {"l1": [20, 1, 50, 6], "l2": [-100]}, {"l1": [5, 6, 9, 100], "l2": [-100, -100, -100, -100, -100]}], "outputs": [1.0, 0.0, -22.0, -100.0, -100.0], "max_gen_length": 256, "category": "data science", "name": "Compare means", "description": "Find the smaller mean given two lists.", "id": "78"}
{"prompts": ["Initialize a variable named lst1 with a list {l1}.", "Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectively", "Compute the coeffeicient of variation", "Print out the coefficient of variation"], "inputs": [{"l1": [1, 1, 1, 1, 1]}, {"l1": [-100, -10, 5, 5, -10]}, {"l1": [-1, 1, -10, 10, 2, 3, 5]}, {"l1": [-5, 7, -3, -4, 9, 10, -1, 11]}, {"l1": [20, 1, 50, 6]}], "outputs": [0.0, -1.7987599034008526, 3.9749213828703582, 2.140872096444188, 0.9906801321840804], "max_gen_length": 256, "category": "data science", "name": "Coefficient of variation", "description": "Compute coefficient of variation given a list.", "id": "79"}
{"prompts": ["Initialize a variable named lst1 with a list {l1}.", "Get the absolute value of every element in lst1 and assign to a lst2", "Compute the sum of lst2 and assign to l1", "Print out l1"], "inputs": [{"l1": [0, 0]}, {"l1": [1, 1]}, {"l1": [-1, 1, -100, 100]}, {"l1": [0, 0, 59, 1, 40]}, {"l1": [-50, -10, 40, 200, 1000]}], "outputs": [0, 2, 202, 100, 1300], "max_gen_length": 256, "category": "data science", "name": "L1 norm", "description": "Compute the L1 norm given a list.", "id": "80"}
{"prompts": ["Assigns a list {lst1} to a variable named lst1", "Compute the sample mean of lst1", "Compute the sample standard deviation of lst1", "Compute the z-statistic to test whether its mean is 0", "Print out the z-statistic"], "inputs": [{"lst1": [0.3, 1.0, 2.0, -2.0, 4.0, -5.0]}, {"lst1": [1.3, 5.0, 2.1, -2.4, 4.1, 5.1]}, {"lst1": [1.3, 15.0, 2.9]}, {"lst1": [0.3, -1.0, -2.0, 5.0, 1.0, 5.1]}, {"lst1": [10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0]}], "outputs": [0.017307532290566904, 0.9670745372626464, 1.046418644730305, 0.5092873663524808, 1.8989720877738328], "max_gen_length": 256, "category": "data science", "name": "Z-statistic", "description": "Compute z-statistic given a list.", "id": "81"}
{"prompts": ["Assign a list {lst} to named lst1", "Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectively", "Concatenate lst_pos and lst_neg and assign it lst2", "Print out lst2"], "inputs": [{"lst": [3, -3, 2, -2]}, {"lst": [-5, 7, -3, -4, 9, 10, -1, 11]}, {"lst": [-1000, 11]}, {"lst": [9, -10, 8, 2, -77, -50, 11, 6]}, {"lst": [-50, -70, -30, 4, 3, -100, 1]}], "outputs": [[3, 2, -3, -2], [7, 9, 10, 11, -5, -3, -4, -1], [11, -1000], [9, 8, 2, 11, 6, -10, -77, -50], [4, 3, 1, -50, -70, -30, -100]], "max_gen_length": 256, "category": "array", "name": "Move all negative elements to end", "description": "Move all negative elements in a list to the end.", "id": "82"}
{"prompts": ["Initialize a variable named w with a string {w}", "Lower every character in w", "Replace every alphabetical characters in w with ''", "Print out the new word after substitution"], "inputs": [{"w": "2a4B"}, {"w": "br2ace"}, {"w": "100"}, {"w": "3g4lc"}, {"w": "12Apple0"}], "outputs": ["24", "2", "100", "34", "120"], "max_gen_length": 256, "category": "string", "name": "Remove alphabetical characters", "description": "Remove alphabetical characters in a string.", "id": "83"}
{"prompts": ["Import and initialize a numpy array \"X\" with the values {X}.", "Calculate the dot product between all rows and store the result to \"Xn\", where (i, j) element stores the dot product between i-th and j-th  row of \"X\".", "Set the diagonal elements of \"Xn\" to 0.", "Print out the maximum value (cast as a float) in \"Xn\"."], "inputs": [{"X": [[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]]}, {"X": [[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]]}, {"X": [[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]]}, {"X": [[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]]}, {"X": [[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]]}], "outputs": [0.6399499999999999, 16, 29, 2.35021, 74], "max_gen_length": 128, "category": "data science", "name": "Largest norm", "description": "Find the largest norm among n-dimensional points.", "id": "84"}
{"prompts": ["Initialize numpy arrays \"pred\" with the values {pred}, \"y\" with the values {y}.", "Compare the equivalence of two arrays and store the results as \"match\".", "Assign the boolean array for whether \"y\" is greater than 0 to a variable \"non_zero\".", "Perform the logical \"AND\" operation between \"match\" and \"non_zero\", store the result as \"correct\".", "Compute the precision by dividing the number of True values in \"correct\" by that in \"pred\", and store as \"prec\".", "Compute the recall by dividing the number of True values in \"correct\" by the number of actual non-zero values in \"y\", and store the result as \"rec\".", "Calculate the harmonic mean between \"prec\" and \"rec\" and print out the value."], "inputs": [{"pred": [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], "y": [0, 1, 1, 0, 1, 0, 0, 0, 0, 1]}, {"pred": [0, 1, 1, 1, 1, 0, 1, 0, 0, 0], "y": [0, 1, 1, 0, 1, 0, 0, 0, 0, 0]}, {"pred": [0, 1, 0, 0, 0], "y": [0, 1, 0, 0, 0]}, {"pred": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "y": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"pred": [0, 1, 0, 0, 0], "y": [0, 1, 1, 1, 1]}], "outputs": [0.6, 0.74999999999, 1.0, 0.1818181818182, 0.4], "max_gen_length": 128, "category": "data science", "name": "F1 score", "description": "Given two arrays (pred, gold), calculate the F1 score.", "id": "85"}
{"prompts": ["Initialize a string named \"concat\" with {x}.", "Import the regex module and define a pattern \"pat\" that matches capital alphabets that can be referenced as a group.", "Find all the matches in \"concat\" with \"pat\", and insert an additional whitespace before the matched character with, then store the result to \"result\".", "Print out \"result\"."], "inputs": [{"x": "ACapitalLetterWords"}, {"x": "camelCaseMethod"}, {"x": "ABCDE"}, {"x": "splitDB"}, {"x": "donotsplitanything"}], "outputs": [" A Capital Letter Words", "camel Case Method", " A B C D E", "split D B", "donotsplitanything"], "max_gen_length": 128, "category": "string", "name": "Add Space", "description": "Add spaces before capital letters.", "id": "86"}
{"prompts": ["Initialize a list \"x\" with the values {x}.", "Assuming the normal distribution, calculate mean and standard deviation of \"x\" using numpy, store the results to \"mean\" and \"std\".", "Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to \"results\".", "Sort \"results\" in ascending order and print it out."], "inputs": [{"x": [0, 0, 0, 0, 100]}, {"x": [-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120]}, {"x": [3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3]}, {"x": [0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4]}, {"x": [4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3]}], "outputs": [[100], [-100, 120], [-7], [-7, -7], [-5]], "max_gen_length": 128, "category": "data science", "name": "Remove outlier", "description": "Remove data points in the tail (2sigma) of normal distribution.", "id": "87"}
{"prompts": ["Initialize a list \"x\" with the values {x}", "Obtain a list of unique elements in x and sort them, store the results to \"vocab\".", "Create a hash map from the values of \"vocab\" to their indices and store the result to \"v2i\".", "Initialize a numpy array of zeros named \"features\" whose row size is the length of x and column size is the length of \"index\", with a data type of int.", "For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using \"v2i\".", "Print out \"features\"."], "inputs": [{"x": [4, 2, 3, 1, 0, 3, 3, 3, 2, 1]}, {"x": [0, 1, 2]}, {"x": [1, 1, 1, 1, 1]}, {"x": [0, 0, 0, 0, 0]}, {"x": [0, 0, 1, 1]}], "outputs": [[[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]], [[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1], [1], [1], [1], [1]], [[1], [1], [1], [1], [1]], [[1, 0], [1, 0], [0, 1], [0, 1]]], "max_gen_length": 128, "category": "data science", "name": "Convert to categorical", "description": "Convert values into categorical variables.", "id": "88"}
{"prompts": ["Initialize a variable \"x\" with {x}.", "Apply the function \"{fun}\" to each element in the list and store the results to \"mapped\".", "Convert each element in \"mapped\" into string.", "Define \"results\" with a dictionary whose keys are the unique values in \"mapped\" and values are empty lists.", "Looping over the zip of \"mapped\" and \"x\", append the value in \"x\" to the value of \"results\" using the value in \"mapped\" as the key.", "Print out the \"results\"."], "inputs": [{"fun": "len", "x": ["a", "b", "c"]}, {"fun": "len", "x": ["apple", "banana", "orange", "peach"]}, {"fun": "type", "x": [1, 2, 3, "a", "b", "c"]}, {"fun": "len", "x": [[1, 2, 3], "a", "b", "c"]}, {"fun": "str", "x": [1, 2, 3, "1", "2", "3"]}], "outputs": [{"1": ["a", "b", "c"]}, {"5": ["apple", "peach"], "6": ["banana", "orange"]}, {"int": [1, 2, 3], "str": ["a", "b", "c"]}, {"1": ["a", "b", "c"], "3": [[1, 2, 3]]}, {"2": [2, "2"], "3": [3, "3"], "1": [1, "1"]}], "max_gen_length": 128, "category": "array", "name": "Group by key", "description": "Group items in an array using a provided function.", "id": "89"}
{"prompts": ["Initialize a variable \"best\" with -1, \"array\" with {array}", "Assign the first element of \"array\" to a variable named \"minimum\".", "In a for loop over \"array\" starting from the second element, do 1) update \"best\" when the element minus \"minimum\" is larger than \"best\", and 2) update \"minimum\" with the value of element if it is smaller than \"minimum\".", "Print out \"best\"."], "inputs": [{"array": [1, 2, 3, 4, 5]}, {"array": [5, 2, 3, 4, 0]}, {"array": [12, 7, 8, 5, 9, 5, 14, 9, 8, 9]}, {"array": [1, 10, 1, 10, 0]}, {"array": [1, 2, 3, 2, 1]}], "outputs": [4, 2, 9, 9, 2], "max_gen_length": 128, "category": "array", "name": "Max stock profit", "description": "Given an array of \"prices\", find the max profit.", "id": "90"}
{"prompts": ["Initialize a variable \"target\" with {target}, a variable \"nums\" with {nums}, and \"result\" with an empty list.", "Enumerating over \"nums\", compare each element with \"target\" and add its index position  to \" result\" if they are equivalent.", "Print out the sum of elements in \"result\"."], "inputs": [{"target": 1, "nums": [1, 2, 1, 2, 1]}, {"target": 1, "nums": [0, 0, 0]}, {"target": 1, "nums": [1.1, 2, 3, 2, 1]}, {"target": "1", "nums": [1, 2, 3, 2, 1]}, {"target": "1", "nums": [1, "1", 2, "1"]}], "outputs": [6, 0, 4, 0, 4], "max_gen_length": 128, "category": "array", "name": "Sum positions", "description": "Sum of all position indices where a value appear.", "id": "91"}
{"prompts": ["Initialize a variable \"nums\" with {nums} and a variable \"N\" with {N}.", "Initialize a variable \"all_nums\" which is a set of numbers between 1 and N.", "Subtract the set of numbers in \"nums\" from \"all_nums\", and store the result to \"diff\"", "Pop the only element in \"diff\" print it out."], "inputs": [{"nums": [1, 3, 4], "N": 4}, {"nums": [1, 2, 3, 4], "N": 5}, {"nums": [4, 3, 9, 7, 8, 5, 2, 1, 10], "N": 10}, {"nums": [6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19], "N": 20}, {"nums": [], "N": 1}], "outputs": [2, 5, 6, 18, 1], "max_gen_length": 128, "category": "array", "name": "Find missing num", "description": "Find a missing number given a list and a max number.", "id": "92"}
{"prompts": ["Assign {x} to a variable named \"X\".", "Initialize a variable named \"common\" with a set of unique elements in the first index of \"X\".", "Iterating over \"X\", update \"common\" with an intersection of \"common\" and the set of unique elements in the current index of \"X\"", "Cast \"common\" as a list and print it out."], "inputs": [{"x": [[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]]}, {"x": [[1, 1], [1, 1]]}, {"x": [[1, 2, 3], [2, 3, 4], [3, 4, 5]]}, {"x": [[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]]}, {"x": [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]}], "outputs": [[3, 5], [1], [3], [21], [1, 2, 3, 4, 5]], "max_gen_length": 128, "category": "array", "name": "Common num in matrix", "description": "Common numbers among rows in a matrix.", "id": "93"}
{"prompts": ["Initialize a variable \"start\" with {start}, and \"seq\" with a list containing {start}.", "While the value is not 1, perform the following: if \"start\" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to \"start\" as well as appending to \"seq\".", "Store the sum of all numbers in \"seq\" to \"results\".", "Print out the \"results\"."], "inputs": [{"start": 1}, {"start": 9}, {"start": 27}, {"start": 28}, {"start": 123456789}], "outputs": [1, 55, 101440, 330, 1266590663], "max_gen_length": 128, "category": "algorithm", "name": "Sum Collatz", "description": "Obtain the sum of Collatz sequence starting from given number.", "id": "94"}
{"prompts": ["Define a variable \"pos\" with \"{start}\", \"swap\" with {swap}.", "Write a function \"move\" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.", "For each element in \"swap\", if it contains \"pos\", call \"move\" on \"pos\" and the current element and store the result to \"pos\".", "Print out \"pos\"."], "inputs": [{"start": "A", "swap": ["AB", "BC", "CA", "BC", "AC"]}, {"start": "B", "swap": ["AC", "CA"]}, {"start": "C", "swap": ["AB", "BC", "CA", "BC", "AC", "AB", "CA", "BC", "AC", "BA"]}, {"start": "C", "swap": ["AB", "AC"]}, {"start": "A", "swap": []}], "outputs": ["C", "B", "B", "A", "A"], "max_gen_length": 128, "category": "algorithm", "name": "Cup swap", "description": "Name the location of a \"ball\" after cup swapping.", "id": "95"}
{"prompts": ["Initialize a variable \"stack\" with an empty list, and \"num\" with {x} as a string.", "For each chracter in \"num\", append the character to \"stack\".", "Assign an empty string to a variable \"result\", and concatenate characters popped from the last element of \"stack\" to \"result\" until \"stack\" is empty.", "Cast \"result\" as integer and print it out."], "inputs": [{"x": 123}, {"x": 123456789}, {"x": 100}, {"x": 0}, {"x": 1230}], "outputs": [321, 987654321, 1, 0, 321], "max_gen_length": 128, "category": "algorithm", "name": "Reverse digits", "description": "Reverse digits in a number with a stack.", "id": "96"}
{"prompts": ["Assign {x} to a variable \"arrows\", then concatenate all the strings in \"arrows\" and store the result to \"joined_arrow\".", "Count the numbers of left-facing arrow and right-facing arrow and store the results to \"left\" and \"right\", respectively.", "If \"right\" is larger than \"left\", print out the string that consists of (right - left) right-facing arrows.", "Otherwise, print out the string that consists of (left - right) left-facing arrows."], "inputs": [{"x": ["<<", ">>>"]}, {"x": ["<<<", ">>"]}, {"x": ["<<", ">>", "<<", ">>>", ">>>"]}, {"x": ["<<", ">>"]}, {"x": ["<<<<<<<<<<<<", ">"]}], "outputs": [">", "<", ">>>>", "", "<<<<<<<<<<<"], "max_gen_length": 128, "category": "algorithm", "name": "Calculate arrows", "description": "Calculate arrowheads left and right.", "id": "97"}
{"prompts": ["Initialize an array \"array\" with {x}.", "Calculate the difference of maximum and minimum values in \"array\" and store the value to \"diff\".", "Check if \"diff\" is included in \"array\" and store the boolean value to \"result\".", "Print out \"result\""], "inputs": [{"x": [1, 2, 3, 4, 5, 6, 8]}, {"x": [1, 7, 8]}, {"x": [10]}, {"x": [0, 1]}, {"x": [1000, 2, 3, 4, 5, 6, 1000000]}], "outputs": [false, true, false, true, false], "max_gen_length": 128, "category": "algorithm", "name": "Check interval num ", "description": "Check if the interval (max-min) is included in a list.", "id": "98"}
{"prompts": ["Initialize a variable \"original\" with \"{x}\"", "Import OrderedDict from collections module, then initalize a variable \"dic\" with an OrderedDict with letters in \"original\" as keys and 0 as the value for each key.", "Iterating over each character in \"original\", increment the value in \"dic\" whose key is the character.", "Initialize an empty string to a variable \"result\", then iterate over items in \"dic\" and append the key and the value as strings to \"result\".", "Print out \"result\"."], "inputs": [{"x": "aabbddcc"}, {"x": "abc"}, {"x": "zzzzzyyyyyxxxxxa"}, {"x": "aaa"}, {"x": ""}], "outputs": ["a2b2d2c2", "a1b1c1", "z5y5x5a1", "a3", ""], "max_gen_length": 128, "category": "string", "name": "Length encoding", "description": "Encode a string by converting repeated chars with counts.", "id": "99"}
{"prompts": ["Import re and define a regular expression that matches an email address.", "Search for an email address in \"{x}\" and store the first match to a variable \"address\".", "Remove the substring starting from the @ symbol from \"address\".", "Replace non-alphabetical symbols with a whitespace in \"address\".", "Print out \"address\"."], "inputs": [{"x": "abc@example.com."}, {"x": "a.b.c@example.com test."}, {"x": "a1b2c3.d4e_f6@example.com."}, {"x": "abc@example.com test. def@abc.def."}, {"x": "example@@example.com test, example_email@abc.io ."}], "outputs": ["abc", "a b c", "a b c  d e f ", "abc", "example email"], "max_gen_length": 128, "category": "string", "name": "Convert email", "description": "Use regex to match email addresses and remove special chars.", "id": "100"}
{"prompts": ["Assign the list of numbers \"{A}\" to a variable named \"my_numbers\".", "Implement a function that returns the distinct elements of a list.", "Compute the distinct elements of my_numbers and store as unique_list.", "Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum."], "inputs": [{"A": [1, 3, 2, 2]}, {"A": [1000, 1000, 1000]}, {"A": [0, 0.2, 0.4, -0.2]}, {"A": [3, 3, 3, 2, 2, 1]}, {"A": [0, 3, 1, 3, 2, 2, -0.2, 0.2]}], "outputs": [2, 1000, 0.2, 2, 2], "max_gen_length": 128, "category": "array", "name": "Second largest", "description": "Print out the second largest element in an array.", "id": "101"}
{"prompts": ["Assign the list of numbers \"{A}\" to a variable named \"my_numbers\".", "Implement a function that returns the prefix sum of a list as an array.", "Compute the prefix sum of my_numbers and store as prefix_sum_list.", "Print out the largest element in prefix_sum_list. "], "inputs": [{"A": [1, 3, 2, 2]}, {"A": [3, -3, -3]}, {"A": [0, 0.2, 0.4, -0.2]}, {"A": [3, 3, 3, -2, 2, 1]}, {"A": [-0.2, 5, -0.2]}], "outputs": [8, 3, 0.6, 10, 4.8], "max_gen_length": 128, "category": "array", "name": "Largest prefix sum", "description": "Return the largest prefix sum in an array.", "id": "102"}
{"prompts": ["Assign the list of numbers \"{A}\" to a variable named \"my_numbers\".", "Count the distances from each element in my_number to 0. .", "Find the closest number to 0 in my_number and store as closest_number.", "Print out the distance from closest_number to 0. "], "inputs": [{"A": [1, 3, 2, 2]}, {"A": [3, -3, -3]}, {"A": [0, 0.2, 0.4, -0.2]}, {"A": [3, 3, 3, -2, 2, 1]}, {"A": [-0.2, 5, -0.2]}], "outputs": [1, 3, 0, 1, 0.2], "max_gen_length": 128, "category": "array", "name": "Closest element to zero", "description": "Find the element which is the cloest to 0 and print the distance.", "id": "103"}
{"prompts": ["Assign the string \"{A}\" to a variable named \"my_string\".", "Implement a function that checks whether a string only contains unique characters.", "Find the longest substring of my_string that contains only unique characters and store as result_substring.", "Print out the length of result_substring."], "inputs": [{"A": "acc"}, {"A": "accccccccccccccccccccc"}, {"A": "abcdef"}, {"A": "acdeffce"}, {"A": "aaaaaaaaaaaaa"}], "outputs": [2, 2, 6, 5, 1], "max_gen_length": 128, "category": "string", "name": "Consecutive unique char", "description": "Find the max length contiguous subarray with unique characters.", "id": "104"}
{"prompts": ["Assign a string \"{A}\" to a variable named \"my_string\".", "Find the repeated characters in the my_string.", "Count the frequency of these repeated characters.", "Print out the length of most frequent character."], "inputs": [{"A": "abadb"}, {"A": "aaaaaaaa"}, {"A": "caaaaaaaaaaaa"}, {"A": "cccccaaaaa"}, {"A": "abcde"}], "outputs": [2, 8, 12, 5, 0], "max_gen_length": 128, "category": "string", "name": "Highest frequency char", "description": "Obtain the frequency of the most frequent character.", "id": "105"}
{"prompts": ["Assign a string \"{A}\" to a variable named \"my_string\".", "Implement a function that checks whether a string is a palindrome.", "Find all substrings of my_string which is a palindrome and store as a list.", "Print out the length of longest palindrome in the above list."], "inputs": [{"A": "a"}, {"A": "abcba"}, {"A": "caaa"}, {"A": "cccccaaaaa"}, {"A": "abcde"}], "outputs": [1, 5, 3, 5, 1], "max_gen_length": 128, "category": "string", "name": "Longest palindrome", "description": "Find the length of longest palindrome substring.", "id": "106"}
{"prompts": ["Assign an integer \"{A}\" to a variable named \"my_integer\".", "Implement a function that checks whether an integer is a prime number.", "Find all prime numbers that are less than my_integer and store as prime_result.", "Print out the length of prime_result."], "inputs": [{"A": 10}, {"A": 0}, {"A": 1}, {"A": 100}, {"A": 17}], "outputs": [4, 0, 0, 25, 6], "max_gen_length": 128, "category": "algorithm", "name": "Count primes", "description": "Calcuate prime numbers in a range.", "id": "107"}
{"prompts": ["Assign an array \"{A}\" to a variable named \"my_array\".", "Assign a positive integer \"{K}\" to a variable named \"k\".", "Implement a function that rotates one array to the right by 1 step.", "Rotate my_array k steps and store as rotated_result.", "Print out rotated_result."], "inputs": [{"A": [1, 2, 3, 4, 5], "K": 3}, {"A": [-1, 30, 50, 3], "K": 2}, {"A": [2, 3, 5, -30], "K": 1}, {"A": [1, 2, 0, 4], "K": 0}, {"A": [2, 3, 4], "K": 8}], "outputs": [[3, 4, 5, 1, 2], [50, 3, -1, 30], [-30, 2, 3, 5], [1, 2, 0, 4], [3, 4, 2]], "max_gen_length": 128, "category": "algorithm", "name": "Rotate array", "description": "Rotate an array to the right k steps.", "id": "108"}
{"prompts": ["Assign an array \"{A}\" to a variable named \"my_array\".", "Compute the sum of my_array and store as my_sum.", "Implement a function that checks whether one subset of an array \"{A}\" is equal to my_sum/2.", "Print out the function output when the above array is my_array."], "inputs": [{"A": [1, 2, 3, 4, 5]}, {"A": [1, 5, 11, 5]}, {"A": [1, 2, 3, 5]}, {"A": [1, 2, 0, 4]}, {"A": [2, 3, 4, 3]}], "outputs": ["False", "True", "False", "False", "True"], "max_gen_length": 128, "category": "algorithm", "name": "Partition equal sets", "description": "Check whether one array can be divided into two subsets which have equal sums.", "id": "109"}
{"prompts": ["Assign a non-negative integer \"{A}\" to a variable named \"my_number\".", "Compute the square root of my_number and store as root_number.", "Implement a function that only returns the integer part of a float number.", "Print out the integer part of root_number."], "inputs": [{"A": 2}, {"A": 5}, {"A": 101}, {"A": 8}, {"A": 226}], "outputs": [1, 2, 10, 2, 15], "max_gen_length": 128, "category": "math", "name": "Square root integer", "description": "Compute the integer part of square root.", "id": "110"}
{"prompts": ["Assign a non-negative integer \"{A}\" to a variable named \"my_number\".", "Plus my_number by 1 and store as plus_number.", "Implement a function that only returns the digits of an integer as a list.", "Print out the digits of plus_number."], "inputs": [{"A": 2}, {"A": 5}, {"A": 101}, {"A": 2345}, {"A": 229}], "outputs": [[3], [6], [1, 0, 2], [2, 3, 4, 6], [2, 3, 0]], "max_gen_length": 128, "category": "math", "name": "Plus 1", "description": "Return the digits after an interger is plused by 1.", "id": "111"}
{"prompts": ["Assign a non-negative integer \"{A}\" to a variable named \"my_number\".", "Implement a function that computes the square sum of two integers.", "Implement a function that checks one number is the sum of two square numbers.", "Print out \"True\" if my_number is the sum of two square numbers. Otherwise, print \"False\"."], "inputs": [{"A": 2}, {"A": 5}, {"A": 101}, {"A": 3}, {"A": 7}], "outputs": ["True", "True", "True", "False", "False"], "max_gen_length": 128, "category": "math", "name": "Check square sum", "description": "Check whether one integer is a sum of  two square numbers.", "id": "112"}
{"prompts": ["Assign an array \"{A}\" to a variable named \"my_array\".", "Implement a function that computes standard deviation of an array.", "Calculate the standard deviation of my_array and store as result.", "Print out \"True\" if result is less than 1. Otherwise, print \"False\"."], "inputs": [{"A": [14, 8, 11, 10]}, {"A": [3, 3, 3, 4]}, {"A": [1, 1, 1, 1, 1, 101]}, {"A": [1, 2, 3, 4, 5, 6, 7]}, {"A": [1, 0, 1, 0]}], "outputs": ["False", "True", "False", "False", "True"], "max_gen_length": 128, "category": "data science", "name": "Comare std. dev.", "description": "Determine whether standard deviation is less than 1.", "id": "113"}
{"prompts": ["Assign the matrix \"{A}\" to a variable named \"my_matrix\".", "Calculate the number of rows of my_matrix and store as row_number.", "Calculate the number of columns of my_matrix and store as column_number.", "Calculate the sum of row_number and column_number and print the result."], "inputs": [{"A": [[3, 2], [2, 3]]}, {"A": [[3, 2, 5], [2, 3, 5]]}, {"A": [[1]]}, {"A": [[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]}, {"A": [[5, 5, 5, 5, 5, 0]]}], "outputs": [4, 5, 2, 6, 7], "max_gen_length": 128, "category": "data science", "name": "Matrix size", "description": "Calculate the sum of row and column numbers.", "id": "114"}
{"prompts": ["Assign the array \"{A}\" to a variable named \"my_array\".", "Calculate the mean of my_array and store as mean_number.", "Calculate the median of my_array and store as median_number.", "Calculate the difference between mean_number and median_number and print the result."], "inputs": [{"A": [3, 2, 2, 3]}, {"A": [3, 2, 5, 2, 3, 5]}, {"A": [1]}, {"A": [30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]}, {"A": [5, 5, 5, 5, 5, 0]}], "outputs": [0, 0.3333333333333335, 0, -9999.666666666668, -0.833333333333333], "max_gen_length": 128, "category": "data science", "name": "Diff mean and median", "description": "Calculate the difference between mean and median for an array.", "id": "115"}
