#pragma once

// @generated by torchgen/gen.py from Function.h

#include <ATen/Context.h>
#include <ATen/DeviceGuard.h>
#include <ATen/TensorUtils.h>
#include <ATen/TracerMode.h>
#include <ATen/core/Generator.h>
#include <ATen/core/Reduction.h>
#include <ATen/core/Tensor.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <c10/core/TensorOptions.h>
#include <c10/util/Deprecated.h>
#include <c10/util/Optional.h>



#include <ATen/ops/_linalg_inv_out_helper_ops.h>

namespace at {


// aten::_linalg_inv_out_helper_(Tensor(a!) self, Tensor(b!) infos_lu, Tensor(c!) infos_getri) -> Tensor(a!)
TORCH_API inline at::Tensor & _linalg_inv_out_helper_(at::Tensor & self, at::Tensor & infos_lu, at::Tensor & infos_getri) {
    return at::_ops::_linalg_inv_out_helper_::call(self, infos_lu, infos_getri);
}

// aten::_linalg_inv_out_helper.out(Tensor self, Tensor(b!) infos_lu, Tensor(c!) infos_getri, *, Tensor(a!) out) -> Tensor(a!)
TORCH_API inline at::Tensor & _linalg_inv_out_helper_out(at::Tensor & out, const at::Tensor & self, at::Tensor & infos_lu, at::Tensor & infos_getri) {
    return at::_ops::_linalg_inv_out_helper_out::call(self, infos_lu, infos_getri, out);
}

// aten::_linalg_inv_out_helper.out(Tensor self, Tensor(b!) infos_lu, Tensor(c!) infos_getri, *, Tensor(a!) out) -> Tensor(a!)
TORCH_API inline at::Tensor & _linalg_inv_out_helper_outf(const at::Tensor & self, at::Tensor & infos_lu, at::Tensor & infos_getri, at::Tensor & out) {
    return at::_ops::_linalg_inv_out_helper_out::call(self, infos_lu, infos_getri, out);
}

// aten::_linalg_inv_out_helper.functional(Tensor self, Tensor infos_lu, Tensor infos_getri) -> (Tensor, Tensor infos_lu_out, Tensor infos_getri_out)
TORCH_API inline ::std::tuple<at::Tensor,at::Tensor,at::Tensor> _linalg_inv_out_helper_functional(const at::Tensor & self, const at::Tensor & infos_lu, const at::Tensor & infos_getri) {
    return at::_ops::_linalg_inv_out_helper_functional::call(self, infos_lu, infos_getri);
}

}
