#pragma once

// @generated by torchgen/gen.py from NativeFunction.h

#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <c10/core/TensorOptions.h>
#include <c10/util/Deprecated.h>
#include <c10/util/Optional.h>
#include <c10/core/QScheme.h>
#include <ATen/core/Reduction.h>
#include <ATen/core/Tensor.h>
#include <tuple>
#include <vector>


namespace at {
namespace native {

TORCH_API at::Tensor expand_copy(const at::Tensor & self, at::IntArrayRef size, bool implicit=false);
TORCH_API at::Tensor & expand_copy_out(const at::Tensor & self, at::IntArrayRef size, bool implicit, at::Tensor & out);
TORCH_API at::Tensor expand_copy_SymInt(const at::Tensor & self, c10::SymIntArrayRef size, bool implicit=false);
TORCH_API at::Tensor & expand_copy_SymInt_out(const at::Tensor & self, c10::SymIntArrayRef size, bool implicit, at::Tensor & out);

} // namespace native
} // namespace at
