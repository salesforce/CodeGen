#pragma once

// @generated by torchgen/gen.py from Function.h

#include <ATen/Context.h>
#include <ATen/DeviceGuard.h>
#include <ATen/TensorUtils.h>
#include <ATen/TracerMode.h>
#include <ATen/core/Generator.h>
#include <ATen/core/Reduction.h>
#include <ATen/core/Tensor.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <c10/core/TensorOptions.h>
#include <c10/util/Deprecated.h>
#include <c10/util/Optional.h>



#include <ATen/ops/set_ops.h>

namespace at {


// aten::set.source_Storage_out(Tensor self, Storage source, *, Tensor(a!) out) -> Tensor(a!)
TORCH_API inline at::Tensor & set_out(at::Tensor & out, const at::Tensor & self, at::Storage source) {
    return at::_ops::set_source_Storage_out::call(self, source, out);
}

// aten::set.source_Storage_out(Tensor self, Storage source, *, Tensor(a!) out) -> Tensor(a!)
TORCH_API inline at::Tensor & set_outf(const at::Tensor & self, at::Storage source, at::Tensor & out) {
    return at::_ops::set_source_Storage_out::call(self, source, out);
}

// aten::set.source_Storage_functional(Tensor self, Storage source) -> Tensor
TORCH_API inline at::Tensor set_functional(const at::Tensor & self, at::Storage source) {
    return at::_ops::set_source_Storage_functional::call(self, source);
}

// aten::set.source_Storage_storage_offset_out(Tensor self, Storage source, int storage_offset, int[] size, int[] stride=[], *, Tensor(a!) out) -> Tensor(a!)
TORCH_API inline at::Tensor & set_out(at::Tensor & out, const at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride={}) {
    return at::_ops::set_source_Storage_storage_offset_out::call(self, source, storage_offset, size, stride, out);
}

// aten::set.source_Storage_storage_offset_out(Tensor self, Storage source, int storage_offset, int[] size, int[] stride=[], *, Tensor(a!) out) -> Tensor(a!)
TORCH_API inline at::Tensor & set_outf(const at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride, at::Tensor & out) {
    return at::_ops::set_source_Storage_storage_offset_out::call(self, source, storage_offset, size, stride, out);
}

// aten::set.source_Storage_storage_offset_functional(Tensor self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor
TORCH_API inline at::Tensor set_functional(const at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride={}) {
    return at::_ops::set_source_Storage_storage_offset_functional::call(self, source, storage_offset, size, stride);
}

// aten::set.source_Tensor_out(Tensor self, Tensor source, *, Tensor(a!) out) -> Tensor(a!)
TORCH_API inline at::Tensor & set_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & source) {
    return at::_ops::set_source_Tensor_out::call(self, source, out);
}

// aten::set.source_Tensor_out(Tensor self, Tensor source, *, Tensor(a!) out) -> Tensor(a!)
TORCH_API inline at::Tensor & set_outf(const at::Tensor & self, const at::Tensor & source, at::Tensor & out) {
    return at::_ops::set_source_Tensor_out::call(self, source, out);
}

// aten::set.source_Tensor_functional(Tensor self, Tensor source) -> Tensor
TORCH_API inline at::Tensor set_functional(const at::Tensor & self, const at::Tensor & source) {
    return at::_ops::set_source_Tensor_functional::call(self, source);
}

// aten::set.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
TORCH_API inline at::Tensor & set_out(at::Tensor & out, const at::Tensor & self) {
    return at::_ops::set_out::call(self, out);
}

// aten::set.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
TORCH_API inline at::Tensor & set_outf(const at::Tensor & self, at::Tensor & out) {
    return at::_ops::set_out::call(self, out);
}

// aten::set.functional(Tensor self) -> Tensor
TORCH_API inline at::Tensor set_functional(const at::Tensor & self) {
    return at::_ops::set_functional::call(self);
}

}
