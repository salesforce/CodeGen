#pragma once

// @generated by torchgen/gen.py from Function.h

#include <ATen/Context.h>
#include <ATen/DeviceGuard.h>
#include <ATen/TensorUtils.h>
#include <ATen/TracerMode.h>
#include <ATen/core/Generator.h>
#include <ATen/core/Reduction.h>
#include <ATen/core/Tensor.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <c10/core/TensorOptions.h>
#include <c10/util/Deprecated.h>
#include <c10/util/Optional.h>



#include <ATen/ops/matrix_rank_ops.h>

namespace at {


// aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor
TORCH_API inline at::Tensor matrix_rank(const at::Tensor & self, double tol, bool symmetric=false) {
    return at::_ops::matrix_rank_tol::call(self, tol, symmetric);
}

// aten::matrix_rank(Tensor self, bool symmetric=False) -> Tensor
TORCH_API inline at::Tensor matrix_rank(const at::Tensor & self, bool symmetric=false) {
    return at::_ops::matrix_rank::call(self, symmetric);
}

}
